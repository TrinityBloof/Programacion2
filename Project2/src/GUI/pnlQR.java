/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import codigo.Consultas;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.glxn.qrgen.QRCode;
import net.glxn.qrgen.image.ImageType;
import objetos.qr;

/**
 *
 * @author gara8
 */
public class pnlQR extends javax.swing.JPanel {

    Consultas consulta = new Consultas();
    private BufferedImage newBI;
    private int[][] pixels;

    public pnlQR() {
        initComponents();
        mostrarDatosCombo();
    }

    public void mostrarDatosCombo() {
        cmbSuperHeroe.setModel(consulta.cargarNombresHeroes());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbBuscarEst = new javax.swing.JLabel();
        cmbSuperHeroe = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        lbBuscarEst1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        lbBuscarEst.setText("Buscar Super Heroe:");

        cmbSuperHeroe.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSuperHeroeItemStateChanged(evt);
            }
        });

        jButton1.setText("Enviar Correo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lbBuscarEst1.setText("Correo destinario:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(94, 94, 94)
                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbBuscarEst1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(378, 378, 378)
                        .addComponent(lbBuscarEst)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSuperHeroe, 0, 215, Short.MAX_VALUE)))
                .addGap(383, 383, 383))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbBuscarEst)
                    .addComponent(cmbSuperHeroe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbBuscarEst1))
                        .addGap(142, 142, 142)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                        .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSuperHeroeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSuperHeroeItemStateChanged

    }//GEN-LAST:event_cmbSuperHeroeItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nombre = (String) cmbSuperHeroe.getSelectedItem();
        qr qr = consulta.cargarUnQr(nombre);
        String cadena = "Nombre del Super Heroe: " + qr.getNombre() + ", Género: " + qr.getGenero() + ", Color de ojos: " + qr.getColorOjos() + ", Raza: " + qr.getRaza() + ", Color de Pelo: " + qr.getColorPelo() + ", Altura: " + qr.getAltura() + ", Casa de publicación: " + qr.getCasa() + ", Color de piel: " + qr.getColorPiel() + ", Alineación: " + qr.getAlineacion() + ", Peso: " + qr.getPeso() + "\n\nPoderes:  \n";
        if (qr.isOmniscient() == true) {
            cadena = cadena + "Omniniscient - ";
        }
        if (qr.isOmnipresent() == true) {
            cadena = cadena + "Omnipresent - ";
        }
        if (qr.isVision_cryo() == true) {
            cadena = cadena + "Vision cryo - ";
        }
        if (qr.isMolecular_dissipation() == true) {
            cadena = cadena + "Molecular dissipation - ";
        }
        if (qr.isPhoenix_force() == true) {
            cadena = cadena + "Phoenix force - ";
        }
        if (qr.isSpeed_force() == true) {
            cadena = cadena + "Speed force - ";
        }
        if (qr.isSymbiote_costume() == true) {
            cadena = cadena + "Symbiote costume - ";
        }
        if (qr.isOdin_force() == true) {
            cadena = cadena + "Odin force - ";
        }
        if (qr.isReality_warping() == true) {
            cadena = cadena + "Reality warping - ";
        }
        if (qr.isWeb_creation() == true) {
            cadena = cadena + "Web creation - ";
        }
        if (qr.isVision_thermal() == true) {
            cadena = cadena + "Vision thermal - ";
        }
        if (qr.isVision_x_ray() == true) {
            cadena = cadena + "Vision x ray - ";
        }
        if (qr.isWeather_control() == true) {
            cadena = cadena + "Weather control - ";
        }
        if (qr.isQwardian_power_ring() == true) {
            cadena = cadena + "Qwardian power ring - ";
        }
        if (qr.isRadar_sense() == true) {
            cadena = cadena + "Radar sense - ";
        }
        if (qr.isVitakinesis() == true) {
            cadena = cadena + "Vitakinesis - ";
        }
        if (qr.isVision_heat() == true) {
            cadena = cadena + "Vision heat - ";
        }
        if (qr.isTerrakinesis() == true) {
            cadena = cadena + "Terrakinesis - ";
        }
        if (qr.isResurrection() == true) {
            cadena = cadena + "Resurrection - ";
        }
        if (qr.isThe_force() == true) {
            cadena = cadena + "The force - ";
        }
        if (qr.isMatter_absorption() == true) {
            cadena = cadena + "Matter absorption - ";
        }
        if (qr.isGrim_reaping() == true) {
            cadena = cadena + "Grim reaping - ";
        }
        if (qr.isVision_infrared() == true) {
            cadena = cadena + "Vision infrared - ";
        }
        if (qr.isVision_night() == true) {
            cadena = cadena + "Vision night - ";
        }
        if (qr.isWallcrawling() == true) {
            cadena = cadena + "Wallcrawling - ";
        }
        if (qr.isSuper_breath() == true) {
            cadena = cadena + "Super breath - ";
        }
        if (qr.isWind_control() == true) {
            cadena = cadena + "Wind control - ";
        }
        if (qr.isMelting() == true) {
            cadena = cadena + "Melting - ";
        }
        if (qr.isVision_microscopic() == true) {
            cadena = cadena + "Vision microscopic - ";
        }
        if (qr.isIntuitive_aptitude() == true) {
            cadena = cadena + "Intuitive aptitude - ";
        }
        if (qr.isRadiation_absorption() == true) {
            cadena = cadena + "Radiation absorption - ";
        }
        if (qr.isSub_mariner() == true) {
            cadena = cadena + "Sub mariner - ";
        }
        if (qr.isInvisibility() == true) {
            cadena = cadena + "Invisibility - ";
        }
        if (qr.isMagic_resistance() == true) {
            cadena = cadena + "Magic resistance - ";
        }
        if (qr.isEnhanced_touch() == true) {
            cadena = cadena + "Enhanced touch - ";
        }
        if (qr.isTime_manipulation() == true) {
            cadena = cadena + "Time manipulation - ";
        }
        if (qr.isSonic_scream() == true) {
            cadena = cadena + "Sonic scream - ";
        }
        if (qr.isSonar() == true) {
            cadena = cadena + "Sonar - ";
        }
        if (qr.isPlant_control() == true) {
            cadena = cadena + "Plant control - ";
        }
        if (qr.isMind_control_resistance() == true) {
            cadena = cadena + "Mind control resistance - ";
        }
        if (qr.isMagnetism() == true) {
            cadena = cadena + "Magnetism - ";
        }
        if (qr.isPortal_creation() == true) {
            cadena = cadena + "Portal creation - ";
        }
        if (qr.isOmnilingualism() == true) {
            cadena = cadena + "Omnilingualism - ";
        }
        if (qr.isMolecular_combustion() == true) {
            cadena = cadena + "Molecular combustion - ";
        }
        if (qr.isTelepathy_resistance() == true) {
            cadena = cadena + "Telepathy resistance - ";
        }
        if (qr.isEnergy_resistance() == true) {
            cadena = cadena + "Energy resistance - ";
        }
        if (qr.isSpatial_awareness() == true) {
            cadena = cadena + "Spatial awareness - ";
        }
        if (qr.isToxin_and_disease_resistance() == true) {
            cadena = cadena + "Toxin and disease resistance - ";
        }
        if (qr.isVision_telescopic() == true) {
            cadena = cadena + "Vision telescopic - ";
        }
        if (qr.isRadiation_immunity() == true) {
            cadena = cadena + "Radiation immunity - ";
        }
        if (qr.isWater_control() == true) {
            cadena = cadena + "Water control - ";
        }
        if (qr.isBiokinesis() == true) {
            cadena = cadena + "Biokinesis - ";
        }
        if (qr.isPower_cosmic() == true) {
            cadena = cadena + "Power cosmic - ";
        }
        if (qr.isChanging_armor() == true) {
            cadena = cadena + "Changing armor - ";
        }
        if (qr.isCloaking() == true) {
            cadena = cadena + "Cloaking - ";
        }
        if (qr.isOmnipotent() == true) {
            cadena = cadena + "Omnipotent - ";
        }
        if (qr.isIllumination() == true) {
            cadena = cadena + "Illumination - ";
        }
        if (qr.isHair_manipulation() == true) {
            cadena = cadena + "Hair manipulation - ";
        }
        if (qr.isThirstokinesis() == true) {
            cadena = cadena + "Thirstokinesis - ";
        }
        if (qr.isIllusions() == true) {
            cadena = cadena + "Illusions - ";
        }
        if (qr.isEnhanced_smell() == true) {
            cadena = cadena + "Enhanced smell - ";
        }
        if (qr.isTime_travel() == true) {
            cadena = cadena + "Time travel - ";
        }
        if (qr.isNatural_weapons() == true) {
            cadena = cadena + "Natural_weapons - ";
        }
        if (qr.isHeat_resistance() == true) {
            cadena = cadena + "Heat resistance - ";
        }
        if (qr.isEnergy_manipulation() == true) {
            cadena = cadena + "Energy manipulation - ";
        }
        if (qr.isBanish() == true) {
            cadena = cadena + "Banish - ";
        }
        if (qr.isToxin_and_disease_control() == true) {
            cadena = cadena + "Toxin and disease control - ";
        }
        if (qr.isLevitation() == true) {
            cadena = cadena + "Levitation - ";
        }
        if (qr.isEcholocation() == true) {
            cadena = cadena + "Echolocation - ";
        }
        if (qr.isLight_control() == true) {
            cadena = cadena + "Light control - ";
        }
        if (qr.isRegeneration() == true) {
            cadena = cadena + "Regeneration - ";
        }
        if (qr.isGravity_control() == true) {
            cadena = cadena + "Gravity control - ";
        }
        if (qr.isProbability_manipulation() == true) {
            cadena = cadena + "Probability manipulation - ";
        }
        if (qr.isMind_blast() == true) {
            cadena = cadena + "Mind blast - ";
        }
        if (qr.isPower_suit() == true) {
            cadena = cadena + "Power suit - ";
        }
        if (qr.isGliding() == true) {
            cadena = cadena + "Gliding - ";
        }
        if (qr.isAdaptation() == true) {
            cadena = cadena + "Adaptation - ";
        }
        if (qr.isHeat_generation() == true) {
            cadena = cadena + "Heat generation - ";
        }
        if (qr.isMolecular_manipulation() == true) {
            cadena = cadena + "Molecular manipulation - ";
        }
        if (qr.isEnhanced_sight() == true) {
            cadena = cadena + "Enhanced sight - ";
        }
        if (qr.isIntangibility() == true) {
            cadena = cadena + "Intangibility - ";
        }
        if (qr.isNatural_armor() == true) {
            cadena = cadena + "Natural armor - ";
        }
        if (qr.isAnimal_control() == true) {
            cadena = cadena + "Animal control - ";
        }
        if (qr.isHypnokinesis() == true) {
            cadena = cadena + "Hypnokinesis - ";
        }
        if (qr.isInsanity() == true) {
            cadena = cadena + "Insanity - ";
        }
        if (qr.isNova_force() == true) {
            cadena = cadena + "Nova force - ";
        }
        if (qr.isEnhanced_hearing() == true) {
            cadena = cadena + "Enhanced hearing - ";
        }
        if (qr.isPower_absorption() == true) {
            cadena = cadena + "Power absorption - ";
        }
        if (qr.isFire_resistance() == true) {
            cadena = cadena + "Fire resistance - ";
        }
        if (qr.isMind_control() == true) {
            cadena = cadena + "Mind control - ";
        }
        if (qr.isPrecognition() == true) {
            cadena = cadena + "Precognition - ";
        }
        if (qr.isAnimation() == true) {
            cadena = cadena + "Animation - ";
        }
        if (qr.isSeismic_power() == true) {
            cadena = cadena + "Seismic power - ";
        }
        if (qr.isPhotographic_reflexes() == true) {
            cadena = cadena + "Photographic reflexes - ";
        }
        if (qr.isTechnopath_cyberpath() == true) {
            cadena = cadena + "Technopath cyberpath - ";
        }
        if (qr.isElemental_transmogrification() == true) {
            cadena = cadena + "Elemental transmogrification - ";
        }
        if (qr.isSubstance_secretion() == true) {
            cadena = cadena + "Substance secretion - ";
        }
        if (qr.isElasticity() == true) {
            cadena = cadena + "Elasticity - ";
        }
        if (qr.isPsionic_powers() == true) {
            cadena = cadena + "Psionic powers - ";
        }
        if (qr.isRadiation_control() == true) {
            cadena = cadena + "Radiation control - ";
        }
        if (qr.isPower_nullifier() == true) {
            cadena = cadena + "Power nullifier - ";
        }
        if (qr.isEmpathy() == true) {
            cadena = cadena + "Empathy - ";
        }
        if (qr.isAnti_gravity() == true) {
            cadena = cadena + "Anti gravity - ";
        }
        if (qr.isSelf_sustenance() == true) {
            cadena = cadena + "Self sustenance - ";
        }
        if (qr.isForce_fields() == true) {
            cadena = cadena + "Force fields - ";
        }
        if (qr.isEnergy_constructs() == true) {
            cadena = cadena + "Energy constructs - ";
        }
        if (qr.isInvulnerability() == true) {
            cadena = cadena + "Invulnerability - ";
        }
        if (qr.isReflexes() == true) {
            cadena = cadena + "Reflexes - ";
        }
        if (qr.isEnhanced_memory() == true) {
            cadena = cadena + "Enhanced memory - ";
        }
        if (qr.isSummoning() == true) {
            cadena = cadena + "Summoning - ";
        }
        if (qr.isProjection() == true) {
            cadena = cadena + "Projection - ";
        }
        if (qr.isFire_control() == true) {
            cadena = cadena + "Fire control - ";
        }
        if (qr.isElectrical_transport() == true) {
            cadena = cadena + "Electrical transport - ";
        }
        if (qr.isAstral_projection() == true) {
            cadena = cadena + "Astral projection - ";
        }
        if (qr.isPhasing() == true) {
            cadena = cadena + "Phasing - ";
        }
        if (qr.isElement_control() == true) {
            cadena = cadena + "Element control - ";
        }
        if (qr.isCamouflage() == true) {
            cadena = cadena + "Camouflage - ";
        }
        if (qr.isImmortality() == true) {
            cadena = cadena + "Immortality - ";
        }
        if (qr.isPeak_human_condition() == true) {
            cadena = cadena + "Peak human condition - ";
        }
        if (qr.isShapeshifting() == true) {
            cadena = cadena + "Shapeshifting - ";
        }
        if (qr.isPower_sense() == true) {
            cadena = cadena + "Power sense - ";
        }
        if (qr.isDimensional_travel() == true) {
            cadena = cadena + "Dimensional travel - ";
        }
        if (qr.isClairvoyance() == true) {
            cadena = cadena + "Clairvoyance - ";
        }
        if (qr.isJump() == true) {
            cadena = cadena + "Jump - ";
        }
        if (qr.isHyperkinesis() == true) {
            cadena = cadena + "Hyperkinesis - ";
        }
        if (qr.isMagic() == true) {
            cadena = cadena + "Magic - ";
        }
        if (qr.isEnergy_beams() == true) {
            cadena = cadena + "Energy beams - ";
        }
        if (qr.isTelekinesis() == true) {
            cadena = cadena + "Telekinesis - ";
        }
        if (qr.isEnhanced_senses() == true) {
            cadena = cadena + "Enhanced senses - ";
        }
        if (qr.isTeleportation() == true) {
            cadena = cadena + "Teleportation - ";
        }
        if (qr.isDeath_touch() == true) {
            cadena = cadena + "Death touch - ";
        }
        if (qr.isDarkforce_manipulation() == true) {
            cadena = cadena + "Darkforce manipulation - ";
        }
        if (qr.isElectrokinesis() == true) {
            cadena = cadena + "Electrokinesis - ";
        }
        if (qr.isWeapon_based_powers() == true) {
            cadena = cadena + "Weapon based powers - ";
        }
        if (qr.isAnimal_oriented_powers() == true) {
            cadena = cadena + "Animal oriented powers - ";
        }
        if (qr.isPossession() == true) {
            cadena = cadena + "Possession - ";
        }
        if (qr.isSuper_speed() == true) {
            cadena = cadena + "Super speed - ";
        }
        if (qr.isOmnitrix() == true) {
            cadena = cadena + "Omnitrix - ";
        }
        if (qr.isDexterity() == true) {
            cadena = cadena + "Dexterity - ";
        }
        if (qr.isAudio_control() == true) {
            cadena = cadena + "Audio control - ";
        }
        if (qr.isAstral_travel() == true) {
            cadena = cadena + "Astral travel - ";
        }
        if (qr.isStamina() == true) {
            cadena = cadena + "Stamina - ";
        }
        if (qr.isDensity_control() == true) {
            cadena = cadena + "Density control - ";
        }
        if (qr.isSize_changing() == true) {
            cadena = cadena + "Size changing - ";
        }
        if (qr.isDuplication() == true) {
            cadena = cadena + "Duplication - ";
        }
        if (qr.isEnergy_blasts() == true) {
            cadena = cadena + "Energy blasts - ";
        }
        if (qr.isEnergy_armor() == true) {
            cadena = cadena + "Energy armor - ";
        }
        if (qr.isTelepathy() == true) {
            cadena = cadena + "Telepathy - ";
        }
        if (qr.isCryokinesis() == true) {
            cadena = cadena + "Cryokinesis - ";
        }
        if (qr.isSuper_strength() == true) {
            cadena = cadena + "Super strength - ";
        }
        if (qr.isIntelligence() == true) {
            cadena = cadena + "Intelligence - ";
        }
        if (qr.isLongevity() == true) {
            cadena = cadena + "Longevity - ";
        }
        if (qr.isAnimal_attributes() == true) {
            cadena = cadena + "Animal attributes - ";
        }
        if (qr.isPower_augmentation() == true) {
            cadena = cadena + "Power augmentation - ";
        }
        if (qr.isWeapons_master() == true) {
            cadena = cadena + "Weapons master - ";
        }
        if (qr.isMarksmanship() == true) {
            cadena = cadena + "Marksmanship - ";
        }
        if (qr.isUnderwater_breathing() == true) {
            cadena = cadena + "Underwater breathing - ";
        }
        if (qr.isDanger_sense() == true) {
            cadena = cadena + "Danger sense - ";
        }
        if (qr.isFlight() == true) {
            cadena = cadena + "Flight - ";
        }
        if (qr.isEnergy_absorption() == true) {
            cadena = cadena + "Energy absorption - ";
        }
        if (qr.isStealth() == true) {
            cadena = cadena + "Stealth - ";
        }
        if (qr.isDurability() == true) {
            cadena = cadena + "Durability - ";
        }
        if (qr.isCold_resistance() == true) {
            cadena = cadena + "Cold resistance - ";
        }
        if (qr.isDimensional_awareness() == true) {
            cadena = cadena + "Dimensional awareness - ";
        }
        if (qr.isLantern_power_ring() == true) {
            cadena = cadena + "Lantern power ring - ";
        }
        if (qr.isAccelerated_healing() == true) {
            cadena = cadena + "Accelerated healing - ";
        }
        if (qr.isAgility() == true) {
            cadena = cadena + "Agility - ";
        }
        cadena = cadena.substring(0, cadena.length() - 2);

        if (qr.getFoto() == null) {
            String correo = jTextField1.getText();
            ByteArrayOutputStream out = QRCode.from(cadena).to(ImageType.PNG).stream();
            File f = new File("qr.png");
            FileOutputStream fos;
            try {
                fos = new FileOutputStream(f);
                fos.write(out.toByteArray());
                fos.flush();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            }
            ImageIcon imageIcon = new ImageIcon(out.toByteArray());
            lblImagen.setIcon(imageIcon);

            final String username = "naruto20890@gmail.com";
            final String password = "Test-1234";
            String fromEmail = "naruto20890@gmail.com";

            Properties properties = new Properties();
            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", 587);
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");

            Session session = Session.getInstance(properties, new javax.mail.Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });

            MimeMessage msg = new MimeMessage(session);
            try {
                msg.setFrom(new InternetAddress(fromEmail));
                msg.addRecipient(Message.RecipientType.TO, new InternetAddress(correo));
                msg.setSubject("QR Héroe " + qr.getNombre());

                Multipart emailContent = new MimeMultipart();
                //Text
                MimeBodyPart textBodyPart = new MimeBodyPart();
                textBodyPart.setText("Correo generado automáticamente por el sistema de Super Heroes, porfavor scanea el qr con un lector para ver más información del Super Heroe.");

                //lo otro
                MimeBodyPart qr2 = new MimeBodyPart();
                qr2.attachFile(f);

                //combino
                emailContent.addBodyPart(textBodyPart);
                emailContent.addBodyPart(qr2);
                msg.setContent(emailContent);

                Transport.send(msg);
                JOptionPane.showMessageDialog(null, "Correo envíado!");
            } catch (MessagingException e) {
                e.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String correo = jTextField1.getText();
            ByteArrayOutputStream out = QRCode.from(cadena).to(ImageType.PNG).stream();
            File f = new File("qr.png");
            File f2 = new File("heroe.png");
            FileOutputStream fos;
            try {
                fos = new FileOutputStream(f);
                fos.write(out.toByteArray());
                fos.flush();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            }
            ImageIcon imageIcon = new ImageIcon(out.toByteArray());
            lblImagen.setIcon(imageIcon);

            final String username = "naruto20890@gmail.com";
            final String password = "Test-1234";
            String fromEmail = "naruto20890@gmail.com";

            Properties properties = new Properties();
            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", 587);
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");

            Session session = Session.getInstance(properties, new javax.mail.Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });

            MimeMessage msg = new MimeMessage(session);
            try {
                msg.setFrom(new InternetAddress(fromEmail));
                msg.addRecipient(Message.RecipientType.TO, new InternetAddress(correo));
                msg.setSubject("QR Héroe " + qr.getNombre());

                Multipart emailContent = new MimeMultipart();
                //Text
                MimeBodyPart textBodyPart = new MimeBodyPart();
                textBodyPart.setText("Correo generado automáticamente por el sistema de Super Heroes, porfavor scanea el qr con un lector para ver más información del Super Heroe.");

                //lo otro
                MimeBodyPart qr2 = new MimeBodyPart();
                qr2.attachFile(f);
                
                MimeBodyPart qr3 = new MimeBodyPart();
                qr3.attachFile(f2);

                //combino
                emailContent.addBodyPart(textBodyPart);
                emailContent.addBodyPart(qr3);
                emailContent.addBodyPart(qr2);
                msg.setContent(emailContent);

                Transport.send(msg);
                JOptionPane.showMessageDialog(null, "Correo envíado!");
            } catch (MessagingException e) {
                e.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(pnlQR.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbSuperHeroe;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbBuscarEst;
    private javax.swing.JLabel lbBuscarEst1;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables
}
